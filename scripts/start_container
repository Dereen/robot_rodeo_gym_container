#!/bin/bash
set -eo pipefail  # Exit immediately if a command fails and ensure errors in pipelines are caught

# Function to print the usage information for this script
print_usage() {
    cat <<EOF
Usage: ./start_container [OPTIONS]

This script starts a project's Apptainer container.

Options:
  -h, --help    Show this help message and exit.
  --nv          Enable NVIDIA GPU support in the container.
  --overlay     Enable overlay mode for the container.
  --debug       Enable debug mode to print additional information.
EOF
}

# ============= START: Source the variables and utility functions =============

# Source the variables and utility functions from external scripts
source "$(realpath "$(dirname "${BASH_SOURCE[0]}")")/utils/vars.sh"
source "$(realpath "$(dirname "${BASH_SOURCE[0]}")")/utils/functions.sh"

# ============= END: Source the variables and utility functions =============

# ============= START: Functions =============

select_overlay() {
    debug_log "Selecting an overlay..."

    # List all available overlays (all files that end with .img inside the OVERLAYS_DIR)
    # Let the user interactively choose an overlay (list all of them each on different line and enumerate them)
    local overlays=($(ls -1 "${OVERLAYS_DIR}"/*.img))
    local overlay_count=${#overlays[@]}

    # Check if there are any overlay files
    if [ $overlay_count -eq 0 ]; then
        error_log "No overlay files found in ${OVERLAYS_DIR}. Please add an overlay file and try again."
        exit 1
    fi

    info_log "Available overlays:"
    echo ""
    for ((i = 0; i < overlay_count; i++)); do
        echo "  [$i] $(basename "${overlays[$i]}")"
    done
    echo ""

    read_input "Choose an overlay by entering the corresponding number: "
    debug_log "User input: $REPLY"

    if [[ ! $REPLY =~ ^[0-9]+$ ]]; then
        error_log "Invalid input. Exiting."
        exit 1
    fi

    if [ "$REPLY" -lt 0 ] || [ "$REPLY" -ge $overlay_count ]; then
        error_log "Invalid choice. Exiting."
        exit 1
    fi

    OVERLAY_IMAGE_FILE="${overlays[$REPLY]}"
    OVERLAY_ARG="--overlay ${OVERLAY_IMAGE_FILE}"

    debug_log "Selected overlay: ${OVERLAY_IMAGE_FILE}"
    debug_log "Overlay argument: ${OVERLAY_ARG}"
}

# ============= END: Functions =============

# ============= START: Main Script =============

# Main function to handle the execution of the script
main() {
    overlay=""             # Default is no overlay mode
    nvidia_gpu=""          # Default is no NVIDIA GPU support
    download_image=false   # Flag for image download, currently not used
    is_overlay_enabled=false  # Flag to check if overlay mode is enabled
    debug=""

    # Parse command-line arguments
    while [[ $# -gt 0 ]]; do
        key="$1"
        case $key in
            --nv)
            nvidia_gpu="--nv"  # Enable NVIDIA GPU support
            shift # Move to the next argument
            ;;
            --overlay)
            is_overlay_enabled=true  # Enable overlay mode
            shift # Move to the next argument
            ;;
            -h|--help)
            print_usage  # Show usage information
            exit 0
            ;;
            --debug)
            DEBUG_MODE=true  # Enable debug mode
            debug="--debug"
            debug_variables # Print the variables in debug mode
            shift # Move to the next argument
            ;;
            *)
            print_usage  # Show usage information if an unknown option is encountered
            handle_error "Unknown option: $1"
            shift # Move to the next argument or value
            ;;
        esac
    done

    # If there are more than one arguments left after parsing, show usage and exit with an error
    if [[ $# -gt 1 ]]; then
        print_usage
        handle_error "Unknown option: $1"
    fi

    echo
    echo "================ STARTING APPTAINER CONTAINER ================="
    echo

    # debug_variables

    # Check if Apptainer is installed, and install it if not
    if ! is_apptainer_installed; then
        warn_log "Apptainer is not installed. Please install it first."
        read_input "Do you want to install ${CYAN}Apptainer${RESET} now? (y/N) " response

        # If the user agrees to install Apptainer, run the installation script
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            install_apptainer 
        else
            exit 1  # Exit if the user chooses not to install Apptainer
        fi
    fi    
    
    # Check if already inside an Apptainer container, exit with an error if so
    if in_apptainer; then
        error_log "You are already inside an Apptainer container." && exit 1
    fi

    # Check if the specified image file exists
    debug_log "Checking if the image file ${PINK}${IMAGE_FILE}${RESET} exists."
    if [ ! -f "$IMAGE_FILE" ]; then
        warn_log "Image file ${PINK}${IMAGE_FILE}${RESET} does not exist."
        read_input "Do you want to download the image? [y/N] "

        # If the user agrees to download the image, ask for the username and download it
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            bash "${SCRIPTS_DIR}/transfer_image" download
        else
            exit 1  # Exit if the user chooses not to download the image
        fi
    fi

    # Warn the user if NVIDIA GPU support is not enabled
    debug_log "Checking if NVIDIA GPU support is enabled."
    if [ "$nvidia_gpu" = "" ]; then
        warn_log "You are not using NVIDIA GPU support. If you have \n\
        \ran NVIDIA GPU, you can enable it by using the ${YELLOW}--nv${RESET} option."
    fi

    # Choose an overlay
    debug_log "Checking if overlay mode is enabled."
    if [ "$is_overlay_enabled" = true ]; then
        select_overlay
    fi

    export APPTAINERENV_WORKSPACE_DIR="${WORKSPACE_DIR}"

    # Log the start of the container and execute the container with the appropriate settings
    if [ "$is_overlay_enabled" = true ]; then
        info_log "Starting Apptainer container from image ${PINK}$(basename "${IMAGE_FILE}")${RESET} with overlay image ${PINK}$(basename "${OVERLAY_IMAGE_FILE}")${RESET}."
    else
        info_log "Starting Apptainer container from image ${PINK}$(basename "${IMAGE_FILE}")${RESET}."
    fi

    debug_log "Running:${BOLD} apptainer exec $nvidia_gpu $OVERLAY_ARG -B \"${MOUNT_PATHS[$HARDWARE_TYPE]}\" -e $IMAGE_FILE \"${SCRIPTS_DIR}/utils/init_workspace.sh\" $debug ${RESET}" 
    apptainer exec $nvidia_gpu $OVERLAY_ARG -B "${MOUNT_PATHS[$HARDWARE_TYPE]}" -e $IMAGE_FILE "${SCRIPTS_DIR}/utils/init_workspace.sh" $debug
}

# ============= END: Main Script =============

# Execute the main function with all passed arguments
main "$@"

