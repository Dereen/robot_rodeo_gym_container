#!/bin/bash

# Function to print the usage information for this script
print_usage() {
    cat <<EOF
    
Usage: ./transfer_image <operation> [OPTIONS]

This script transfers a project's Apptainer image between your 
local machine and the remote server.

Operations:
    upload:   Upload the image to the remote server.
    download: Download the image from the remote server.

Options:
    -h, --help                 Show this help message and exit.
    --debug                    Enable debug mode to print additional information.
EOF
}

# ============= START: Source the variables and utility functions =============

# Source the variables and utility functions from external scripts
source "$(realpath "$(dirname "${BASH_SOURCE[0]}")")/utils/vars.sh"
source "$(realpath "$(dirname "${BASH_SOURCE[0]}")")/utils/functions.sh"

# ============= END: Source the variables and utility functions =============

# ============= START: Functions =============

create_remote_connection() {
    debug_log "Creating a connection to the remote server..."

    # Check if sshpass is installed
    install_sshpass
    
    # Ask user if they want to specify a user for the remote server or use the current user
    info_log "Creating a connection to ${PINK}${REMOTE_SERVER}${RESET}..."
    read_input "Specify a remote username or press ${YELLOW}Enter${RESET} to use the current user: "
    USERNAME="${REPLY:-$(whoami)}"

    local attempt=0
	local max_attempts=3
    
    info_log "Attempting to connect to ${PINK}${USERNAME}@${REMOTE_SERVER}${RESET} using SSH key..."
    
	# Check if SSH key exists for the server
	if ssh -o BatchMode=yes "${USERNAME}@${REMOTE_SERVER}" true 2>/dev/null; then
		# If SSH key exists and connection is successful, set ssh_key_exists flag
		info_log "Connection to ${PINK}${REMOTE_SERVER}${RESET} successful."
		return 0
	fi

	while [ $attempt -lt $max_attempts ]; do
		if [ $attempt -eq 0 ]; then
			warn_log "No SSH key found for ${PINK}$(basename "${REMOTE_SERVER}")${RESET}. Please enter the password."
		else
			warn_log "Incorrect password. Please try again. ${RED}(Attempt $attempt/$max_attempts)${RESET}"
		fi

		read -rsp "Password: " SSH_PASSWORD
		echo

		# Attempt to connect using the provided password
		if sshpass -p "${SSH_PASSWORD}" ssh "${USERNAME}@${REMOTE_SERVER}" true 2>/dev/null; then
			export SSH_PASSWORD
            debug_log "Connection to ${PINK}${REMOTE_SERVER}${RESET} successful."
			return 0
		fi

        # Add to the attempt counter
		attempt=$((attempt + 1))
	done

	error_log "Maximum number of attempts exceeded. Exiting."
	exit 1
}

get_remote_image_time() {
    debug_log "Getting the remote image creation time..."

    local creation_time
    if [ -n "$SSH_PASSWORD" ]; then
        debug_log "Using sshpass to connect to the remote server..."
        creation_time=$(sshpass -p "${SSH_PASSWORD}" ssh -t ${USERNAME}@${REMOTE_SERVER} \
            "cat ${REMOTE_METADATA_FILE} 2>/dev/null | jq -r '.created_at // empty'" 2>/dev/null)
        debug_log "Remote image creation time (unformatted): $creation_time"
    else
        debug_log "Using SSH key to connect to the remote server..."
        creation_time=$(ssh -t ${USERNAME}@${REMOTE_SERVER} \
            "cat ${REMOTE_METADATA_FILE} 2>/dev/null | jq -r '.created_at // empty'" 2>/dev/null)
        debug_log "Remote image creation time (unformatted): $creation_time"
    fi
    # Trim trailing whitespace (including newline characters)
    creation_time=$(echo "${creation_time}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
    debug_log "Remote image creation time (formatted): $creation_time"

    echo "${creation_time}"
}

get_local_image_time() {
    debug_log "Getting the local image creation time..."

    local creation_time=$(cat "${METADATA_FILE}" 2>/dev/null |
        jq -r '.created_at // empty')

    debug_log "Local image creation time (unformatted): $creation_time"

    echo "${creation_time}"
}

image_files_exist() {
    debug_log "Checking if the image and metadata files exist..."

    local location="$1"
    local image_exists=false
    local metadata_exists=false

    debug_log "Location: $location"

    install_sshpass
    
    if [ "$location" == "remote" ]; then
        if [ -n "$SSH_PASSWORD" ]; then
            debug_log "Using sshpass to connect to the remote server..."
            sshpass -p "${SSH_PASSWORD}" ssh -t ${USERNAME}@${REMOTE_SERVER} "test -f ${REMOTE_IMAGE_FILE}" 2>/dev/null && image_exists=true
            sshpass -p "${SSH_PASSWORD}" ssh -t ${USERNAME}@${REMOTE_SERVER} "test -f ${REMOTE_METADATA_FILE}" 2>/dev/null && metadata_exists=true
        else
            debug_log "Using SSH key to connect to the remote server..."
            ssh -t ${USERNAME}@${REMOTE_SERVER} "test -f ${REMOTE_IMAGE_FILE}" 2>/dev/null && image_exists=true
            ssh -t ${USERNAME}@${REMOTE_SERVER} "test -f ${REMOTE_METADATA_FILE}" 2>/dev/null && metadata_exists=true
        fi
    elif [ "$location" == "local" ]; then
        [ -f "${IMAGE_FILE}" ] && image_exists=true
        [ -f "${METADATA_FILE}" ] && metadata_exists=true
    else
        echo "Invalid location: $location"
        return 1
    fi

    debug_log "Image file exists: $image_exists"
    debug_log "Metadata file exists: $metadata_exists"

    # Determine the status based on what exists
    if $image_exists && $metadata_exists; then
        return 0  # Both files exist
    elif $image_exists; then
        return 2  # Only image file exists
    elif $metadata_exists; then
        return 3  # Only metadata file exists
    else
        return 4  # Neither file exists
    fi
}

transfer_image() {
    debug_log "Transferring the image file..."

    local operation="$1"
    local source=""
    local destination=""

    debug_log "Operation: $operation"

    install_sshpass

    if [ "$operation" == "upload" ]; then
        src_image="${IMAGE_FILE}"
        src_metadata="${METADATA_FILE}"
        dest_image="${USERNAME}@${REMOTE_SERVER}:${REMOTE_IMAGE_FILE}"
        dest_metadata="${USERNAME}@${REMOTE_SERVER}:${REMOTE_METADATA_FILE}"
    elif [ "$operation" == "download" ]; then
        src_image="${USERNAME}@${REMOTE_SERVER}:${REMOTE_IMAGE_FILE}"
        src_metadata="${USERNAME}@${REMOTE_SERVER}:${REMOTE_METADATA_FILE}"
        dest_image="${IMAGE_FILE}"
        dest_metadata="${METADATA_FILE}"
    else
        echo "Invalid operation: $operation"
        return 1
    fi

    debug_log "Source image: $src_image"
    debug_log "Source metadata: $src_metadata"
    debug_log "Destination image: $dest_image"
    debug_log "Destination metadata: $dest_metadata"

    if [ -n "$SSH_PASSWORD" ]; then
        debug_log "Using sshpass to transfer the files..."
        rsync -zP --rsh="sshpass -p ${SSH_PASSWORD} ssh" "${src_image}" "${dest_image}"
        rsync -zP --rsh="sshpass -p ${SSH_PASSWORD} ssh" "${src_metadata}" "${dest_metadata}"
    else
        debug_log "Using SSH key to transfer the files..."
        rsync -zP "${src_image}" "${dest_image}"
        rsync -zP "${src_metadata}" "${dest_metadata}"
    fi
}

# ============= END: Functions =============

# ===================== START: Main Script ===================== 

# Main function to handle the transfer operations
main() {
    local operation=""  # Initialize the operation variable
    
    # Ensure at least one argument (operation) is provided
    if [[ $# -lt 1 ]]; then
        print_usage
        exit 1
    fi

    # Set the operation (upload/download) and shift arguments
    operation="$1"
    shift # Remove operation from arguments

    # Parse the remaining command-line options
    while [[ $# -gt 0 ]]; do
        key="$1"
        case $key in
            -h|--help)
            print_usage  # Display usage information and exit
            exit 0
            ;;
            --debug)
            DEBUG_MODE=true  # Enable debug mode
            debug_variables  # Print the variables in debug mode
            shift # Move to the next argument
            ;;
            *)
            print_usage  # Display usage information for unknown options
            handle_error "Unknown option: $1"
            exit 1
            ;;
        esac
    done

    # Ensure the operation is either "upload" or "download"
    debug_log "Checking if the operation is valid: ${operation}"
    if [ "$operation" != "upload" ] && [ "$operation" != "download" ]; then
        print_usage
        handle_error "Invalid operation: $operation"
        exit 1
    fi

    # Ensure that user is online
    if [ ! is_online ]; then
        error_log "You do not seem to be online. Please connect to the internet and try again."
        exit 1
    fi

    # Output the operation being performed
    if [ "$operation" == "download" ]; then
        echo
        echo "============ DOWNLOADING SINGULARITY IMAGE ============="
        echo
    elif [ "$operation" == "upload" ]; then
        echo
        echo "============= UPLOADING SINGULARITY IMAGE =============="
        echo
    fi
    
    # Create a remote connection
    create_remote_connection 

    echo 
    info_log "Checking the status of the local and remote image files..."
    
    local_status=$(image_files_exist "local")
    case $? in
        0) info_log "Both local image and metadata files exist.";;
        2) error_log "Only image file exists. Metadata file is missing. Please resolve this before the transfer." && exit 1 ;;
        3) error_log "Only metadata file exists. Image file is missing. Please resolve this before the transfer." && exit 1 ;;
        4) if [ "$operation" == "upload" ]; then
                error_log "Local image nor metadata files exist. Cannot upload the image. Please build the image first." && exit 1
            else
                info_log "Neither local image nor metadata files exist. Downloading a new image..."
                transfer_image "download" && exit 0
            fi
            ;;
    esac
    
    remote_status=$(image_files_exist "remote")
    case $? in
        0) info_log "Both remote image and metadata files exist.";;
        2) error_log "Only remote image file exists. Remote metadata file is missing. Please resolve this before the transfer." && exit 1 ;;
        3) error_log "Only remote metadata file exists. Remote image file is missing. Please resolve this before the transfer." && exit 1 ;;
        4) if [ "$operation" == "download" ]; then
                error_log "Remote image nor metadata files exist. Cannot download the image." && exit 1
            else
                info_log "Neither remote image nor metadata files exist. Uploading a new image..."
                transfer_image "upload" && exit 0
            fi
            ;;
    esac

    echo 
    info_log "Checking the timestamps of the local and remote image files..."

    # Get the timestamps of the local and remote images
    local local_image_time=$(get_local_image_time)
    local remote_image_time=$(get_remote_image_time)

    info_log "Local image timestamp: ${local_image_time}"
    info_log "Remote image timestamp: ${remote_image_time}"

    echo
    read_input "Do you want to continue with the $operation? [y/N] "

    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        info_log "Aborting the $operation."
        exit 0
    fi

    # Transfer the image based on the operation (upload/download)
    transfer_image $operation   

    # Confirm successful transfer
    info_log "The image and metadata files have been successfully transferred."
}

# ===================== END: Main Script =====================

main "$@"
